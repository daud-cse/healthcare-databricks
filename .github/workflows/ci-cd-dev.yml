name: CI-CD Dev

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  ENV: dev

jobs:

  ci:
    runs-on: ubuntu-latest
    outputs:
      test-status: ${{ steps.test.outcome }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install deps
        run: |
          pip install -r requirements.txt
          pip install pytest jq databricks-cli

      - name: Lint
        run: |
          pip install flake8
          flake8 databricks/notebooks || true

      - name: Run unit tests
        id: test
        run: |
          pytest -q

  deploy_dev:
    needs: ci
    runs-on: ubuntu-latest
    if: ${{ needs.ci.result == 'success' }}
    environment: dev
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }} # SPN JSON created earlier

      - name: Configure databricks-cli
        run: |
          python -m pip install databricks-cli jq
          databricks configure --token <<EOF
          ${{ secrets.DATABRICKS_HOST }}
          ${{ secrets.DATABRICKS_TOKEN }}
          EOF

      - name: Deploy Databricks artifacts (CLI)
        run: |
          cd databricks/scripts
          ENV=dev CLUSTER_ID=${{ secrets.DBRX_CLUSTER_ID }} AKV_RESOURCE_ID=${{ secrets.AKV_RESOURCE_ID }} AKV_DNS_NAME=${{ secrets.AKV_DNS_NAME }} bash ./deploy_databricks_cli.sh

      - name: Deploy ADF (ARM)
        run: |
          az deployment group create \
            --resource-group rg-dev \
            --template-file adf/adf_publish/ARMTemplateForFactory.json \
            --parameters @adf/adf_publish/ARMTemplateParameters.json
